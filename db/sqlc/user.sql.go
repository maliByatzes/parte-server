// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  email
) VALUES (
  $1, $2, $3
) RETURNING id, username, hashed_password, email, is_active, is_superuser, thumbnail, updated_at, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.HashedPassword, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.IsActive,
		&i.IsSuperuser,
		&i.Thumbnail,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hashed_password, email, is_active, is_superuser, thumbnail, updated_at, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.IsActive,
		&i.IsSuperuser,
		&i.Thumbnail,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
  username = $2,
  hashed_password = $3,
  email = $4,
  is_active = $5,
  is_superuser = $6,
  thumbnail = $7
WHERE id = $1
RETURNING id, username, hashed_password, email, is_active, is_superuser, thumbnail, updated_at, created_at
`

type UpdateUserParams struct {
	ID             uuid.UUID `json:"id"`
	Username       string    `json:"username"`
	HashedPassword string    `json:"hashed_password"`
	Email          string    `json:"email"`
	IsActive       bool      `json:"is_active"`
	IsSuperuser    bool      `json:"is_superuser"`
	Thumbnail      string    `json:"thumbnail"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.IsActive,
		arg.IsSuperuser,
		arg.Thumbnail,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.IsActive,
		&i.IsSuperuser,
		&i.Thumbnail,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
